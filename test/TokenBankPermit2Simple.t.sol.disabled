// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/TokenBank.sol";
import "../src/BaseERC20.sol";
import "../src/Permit2.sol";

contract TokenBankPermit2SimpleTest is Test {
    TokenBank public tokenBank;
    BaseERC20 public token;
    Permit2 public permit2;
    
    address public user;
    uint256 private userPrivateKey = 0xB0B;
    
    // Permit2 类型哈希
    bytes32 constant TOKEN_PERMISSIONS_TYPEHASH = 
        keccak256("TokenPermissions(address token,uint256 amount)");
    bytes32 constant PERMIT_TRANSFER_FROM_TYPEHASH = 
        keccak256("PermitTransferFrom(TokenPermissions permitted,uint256 nonce,uint256 deadline)TokenPermissions(address token,uint256 amount)");
    
    function setUp() public {
        user = vm.addr(userPrivateKey);
        
        // 部署合约
        token = new BaseERC20(1000000 ether);
        permit2 = new Permit2();
        tokenBank = new TokenBank(address(token), address(permit2));
        
        // 给用户token
        token.transfer(user, 10000 ether);
        
        console2.log("Token:", address(token));
        console2.log("Permit2:", address(permit2)); 
        console2.log("TokenBank:", address(tokenBank));
        console2.log("User:", user);
        console2.log("User balance:", token.balanceOf(user));
    }
    
    function testPermit2Deposit() public {
        console2.log("\n=== Testing Permit2 Deposit ===");
        
        uint256 amount = 300 ether;
        uint256 nonce = 1;
        uint256 deadline = block.timestamp + 3600;
        
        // 1. 授权Permit2
        vm.prank(user);
        token.approve(address(permit2), type(uint256).max);
        console2.log("Step 1: Approved Permit2");
        
        // 2. 构造签名
        bytes32 domainSeparator = permit2.DOMAIN_SEPARATOR();
        bytes32 structHash = _getStructHash(amount, nonce, deadline);
        bytes32 messageHash = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
        
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(userPrivateKey, messageHash);
        bytes memory signature = abi.encodePacked(r, s, v);
        console2.log("Step 2: Generated signature");
        
        // 3. 检查初始状态
        uint256 userBalanceBefore = token.balanceOf(user);
        uint256 bankBalanceBefore = tokenBank.getBalance(user);
        console2.log("Before - User token:", userBalanceBefore);
        console2.log("Before - Bank balance:", bankBalanceBefore);
        
        // 4. 执行存款
        SignatureTransferDetails memory transferDetails = SignatureTransferDetails({
            to: address(tokenBank),
            requestedAmount: amount
        });
        
        vm.prank(user);
        tokenBank.depositWithPermit2(amount, nonce, deadline, transferDetails, signature);
        console2.log("Step 3: Executed depositWithPermit2");
        
        // 5. 验证结果
        uint256 userBalanceAfter = token.balanceOf(user);
        uint256 bankBalanceAfter = tokenBank.getBalance(user);
        console2.log("After - User token:", userBalanceAfter);
        console2.log("After - Bank balance:", bankBalanceAfter);
        
        assertEq(userBalanceBefore - userBalanceAfter, amount, "Token transfer failed");
        assertEq(bankBalanceAfter - bankBalanceBefore, amount, "Bank balance not updated");
        
        console2.log("[SUCCESS] Permit2 deposit test passed!");
    }
    
    function testPermit2DepositWrongSigner() public {
        console2.log("\n=== Testing Wrong Signer ===");
        
        uint256 amount = 300 ether;
        uint256 nonce = 1;
        uint256 deadline = block.timestamp + 3600;
        
        // 授权Permit2
        vm.prank(user);
        token.approve(address(permit2), type(uint256).max);
        
        // 用错误私钥签名
        bytes32 domainSeparator = permit2.DOMAIN_SEPARATOR();
        bytes32 structHash = _getStructHash(amount, nonce, deadline);
        bytes32 messageHash = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
        
        uint256 wrongKey = 0xDEADBEEF;
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(wrongKey, messageHash);
        bytes memory wrongSignature = abi.encodePacked(r, s, v);
        
        SignatureTransferDetails memory transferDetails = SignatureTransferDetails({
            to: address(tokenBank),
            requestedAmount: amount
        });
        
        // 应该失败
        vm.prank(user);
        vm.expectRevert();
        tokenBank.depositWithPermit2(amount, nonce, deadline, transferDetails, wrongSignature);
        
        console2.log("[SUCCESS] Wrong signature rejected");
    }
    
    // 辅助函数：构造结构化hash
    function _getStructHash(uint256 amount, uint256 nonce, uint256 deadline) internal view returns (bytes32) {
        bytes32 tokenPermissionsHash = keccak256(abi.encode(
            TOKEN_PERMISSIONS_TYPEHASH,
            address(token),
            amount
        ));
        
        return keccak256(abi.encode(
            PERMIT_TRANSFER_FROM_TYPEHASH,
            tokenPermissionsHash,
            nonce,
            deadline
        ));
    }
} 